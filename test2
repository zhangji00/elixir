require Logger
require Delete#用该命令必须是编译后的.beam文件 elixirc file.ex 并且得在同一目录下

defmodule TCP do
def accept(port) do
  # The options below mean:
  #
  # 1. `:binary` - receives data as binaries (instead of lists)
  # 2. `packet: :line` - receives data line by line
  # 3. `active: false` - blocks on `:gen_tcp.recv/2` until data is available
  # 4. `reuseaddr: true` - allows us to reuse the address if the listener crashes
  #
  #packet 后是0才能与有人助手通信 
  case :gen_tcp.listen(port,
                    [:binary, packet: 0, active: false, reuseaddr: false])do
   {:ok, socket}  ->    Logger.info "Accepting connections on port #{port}"
                        loop_acceptor(socket)
   {:error,reason} ->  IO.puts reason
                       IO.gets ""   
  end
    
end

defp loop_acceptor(socket) do
  case :gen_tcp.accept(socket) do
   {:ok, client}  -> :gen_tcp.send(client, "hello") 
                      serve(client)

   {:error,reason} -> IO.write "loop_acceptor:"
                      IO.puts reason
  end
  loop_acceptor(socket)
end

defp serve(socket) do
 data = socket |> read_line()
 IO.puts data 
 data|> write_line(socket)
 #write_line(read_line(socket),socket)
 serve(socket)
end

defp read_line(socket) do
  case :gen_tcp.recv(socket, 0) do
   {:ok, data}  -> data

   {:error,reason} -> IO.write "read_line:"
                      IO.puts reason
                      IO.gets "" 
  end
end

defp write_line(line, socket) do
  :gen_tcp.send(socket, line)
end
end
(IO.gets "Input the listener port:") |> Delete.delete() |> String.to_integer() |> TCP.accept()
#TCP.accept(9082)
